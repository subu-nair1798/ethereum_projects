{"ast":null,"code":"import Web3 from \"web3\";\nvar web3;\n\nif (true && (typeof window.ethereum !== \"undefined\" || typeof window.web3 !== \"undefined\")) {\n  if (typeof window.ethereum !== \"undefined\") {\n    // Ethereum user detected. Let's use the injected provider.\n    web3 = new Web3(window.ethereum);\n\n    if (typeof window.ethereum.autoRefreshOnNetworkChange !== \"undefined\") {\n      window.ethereum.autoRefreshOnNetworkChange = false;\n    }\n\n    window.ethereum.on(\"chainChanged\", function () {\n      document.location.reload();\n    }); // Request approval from the user to use an ethereum address they can be identified by.\n\n    window.ethereum.enable().then(function (_accounts) {// no need to do anything here\n    })[\"catch\"](function (error) {\n      // Handle error. Likely the user rejected the login.\n      console.error(error);\n      alert(\"Sorry, this application requires user approval to function correctly.\");\n    });\n  } else {\n    web3 = new Web3(window.web3.currentProvider);\n  }\n} else {\n  // We are on the server OR MetaMask is not running.\n  var provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/d1d22a6bf235434cbd9cef0031eae3bd\");\n  web3 = new Web3(provider);\n}\n\nexport default web3;","map":{"version":3,"sources":["/Users/subunair/Desktop/Dissertation/ethereum/codes/kickstart/ethereum/web3.js"],"names":["Web3","web3","window","ethereum","autoRefreshOnNetworkChange","on","document","location","reload","enable","then","_accounts","error","console","alert","currentProvider","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,IAAIC,IAAJ;;AAEA,IACE,SACC,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAA3B,IAA0C,OAAOD,MAAM,CAACD,IAAd,KAAuB,WADlE,CADF,EAGE;AACA,MAAI,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C;AACAF,IAAAA,IAAI,GAAG,IAAID,IAAJ,CAASE,MAAM,CAACC,QAAhB,CAAP;;AAEA,QAAI,OAAOD,MAAM,CAACC,QAAP,CAAgBC,0BAAvB,KAAsD,WAA1D,EAAuE;AACrEF,MAAAA,MAAM,CAACC,QAAP,CAAgBC,0BAAhB,GAA6C,KAA7C;AACD;;AAEDF,IAAAA,MAAM,CAACC,QAAP,CAAgBE,EAAhB,CAAmB,cAAnB,EAAmC,YAAM;AACvCC,MAAAA,QAAQ,CAACC,QAAT,CAAkBC,MAAlB;AACD,KAFD,EAR0C,CAY1C;;AACAN,IAAAA,MAAM,CAACC,QAAP,CACGM,MADH,GAEGC,IAFH,CAEQ,UAAAC,SAAS,EAAI,CACjB;AACD,KAJH,WAKS,UAASC,KAAT,EAAgB;AACrB;AACAC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAE,MAAAA,KAAK,CACH,uEADG,CAAL;AAGD,KAXH;AAYD,GAzBD,MAyBO;AACLb,IAAAA,IAAI,GAAG,IAAID,IAAJ,CAASE,MAAM,CAACD,IAAP,CAAYc,eAArB,CAAP;AACD;AACF,CAhCD,MAgCO;AACL;AACA,MAAMC,QAAQ,GAAG,IAAIhB,IAAI,CAACiB,SAAL,CAAeC,YAAnB,CACf,+DADe,CAAjB;AAIAjB,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASgB,QAAT,CAAP;AACD;;AAED,eAAef,IAAf","sourcesContent":["import Web3 from \"web3\";\n\nlet web3;\n\nif (\n  typeof window !== \"undefined\" &&\n  (typeof window.ethereum !== \"undefined\" || typeof window.web3 !== \"undefined\")\n) {\n  if (typeof window.ethereum !== \"undefined\") {\n    // Ethereum user detected. Let's use the injected provider.\n    web3 = new Web3(window.ethereum);\n\n    if (typeof window.ethereum.autoRefreshOnNetworkChange !== \"undefined\") {\n      window.ethereum.autoRefreshOnNetworkChange = false;\n    }\n\n    window.ethereum.on(\"chainChanged\", () => {\n      document.location.reload();\n    });\n\n    // Request approval from the user to use an ethereum address they can be identified by.\n    window.ethereum\n      .enable()\n      .then(_accounts => {\n        // no need to do anything here\n      })\n      .catch(function(error) {\n        // Handle error. Likely the user rejected the login.\n        console.error(error);\n        alert(\n          \"Sorry, this application requires user approval to function correctly.\"\n        );\n      });\n  } else {\n    web3 = new Web3(window.web3.currentProvider);\n  }\n} else {\n  // We are on the server OR MetaMask is not running.\n  const provider = new Web3.providers.HttpProvider(\n    \"https://rinkeby.infura.io/v3/d1d22a6bf235434cbd9cef0031eae3bd\"\n  );\n\n  web3 = new Web3(provider);\n}\n\nexport default web3;"]},"metadata":{},"sourceType":"module"}